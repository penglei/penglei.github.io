<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ybyte blog</title>
    <link>/</link>
    <description>Recent content on ybyte blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 08 Sep 2020 21:00:00 +0800</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>/about/</guid>
      <description>The blog is generated by Hugo which is a static site engine written in Go.
 </description>
    </item>
    
    <item>
      <title>Specifying Systems 笔记2 Liveness</title>
      <link>/post/specifying-systems-notes-2/</link>
      <pubDate>Tue, 08 Sep 2020 21:00:00 +0800</pubDate>
      
      <guid>/post/specifying-systems-notes-2/</guid>
      <description>&lt;div id=&#34;preamble&#34;&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Specifying Systems的1-7章层层推进，在实例中穿插着原理讲解，深入浅出地讲解了Specification是什么，以及如何设计系统规约。
这些Specification表明了系统的Safety属性&amp;#8201;&amp;#8212;&amp;#8201;即系统行为被约束在一定范围内，不会做出一些不被允许的行为(something &lt;strong&gt;bad&lt;/strong&gt; does not happen)。
在TLA+中，通常使用公式 \(Spec \triangleq Init \land \Box [Next]_{vars}\) 来描述系统的Safety属性(约束)。
Safety属性说明了系统中什么不能发生，但无法表达系统中&lt;strong&gt;某些时间一定会发生&lt;/strong&gt;的这类属性，而Liveness便可以表达(&#34;something &lt;strong&gt;good&lt;/strong&gt; eventully happen&#34;)。
Liveness使用时态逻辑公式进行描述，一个系统规约可以通过公式 \(Spec \triangleq Init \land \Box [Next]_{vars} \land L\) 来同时描述其对Safety和Liveness的要求，
公式末尾的 $L$ 便是描述Liveness属性的公式。&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>数理逻辑一些概念</title>
      <link>/post/logic/</link>
      <pubDate>Tue, 08 Sep 2020 21:00:00 +0800</pubDate>
      
      <guid>/post/logic/</guid>
      <description>&lt;div id=&#34;preamble&#34;&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;形式化方法已经有大量的应用，如计算机辅助证明、模型检查、系统规约化语言（如TLA+），这些技术的基础都离不开数理逻辑。
现代逻辑学已经发展得非常广泛：
&lt;a href=&#34;https://en.wikipedia.org/wiki/Propositional_calculus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Propositional logic&lt;/a&gt;（命题逻辑），
&lt;a href=&#34;https://en.wikipedia.org/wiki/First-order_logic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;First-order logic&lt;/a&gt;（也称 Predicate logic），
&lt;a href=&#34;https://en.wikipedia.org/wiki/Second-order_logic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Second-order logic&lt;/a&gt;，
&lt;a href=&#34;https://en.wikipedia.org/wiki/Higher-order_logic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Higher-order logic&lt;/a&gt;，
&lt;a href=&#34;https://en.wikipedia.org/wiki/Intuitionistic_logic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Constructive logic&lt;/a&gt;（也称 Intuitionistic logic），
&lt;a href=&#34;https://en.wikipedia.org/wiki/Modal_logic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Modal logic&lt;/a&gt;（模态逻辑），
&lt;a href=&#34;https://en.wikipedia.org/wiki/Temporal_logic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Temporal logic&lt;/a&gt;（时态逻辑是模态逻辑的一个分支），
&lt;a href=&#34;https://plato.stanford.edu/entries/logic-free/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Free logic&lt;/a&gt;，
&lt;a href=&#34;https://plato.stanford.edu/entries/plural-quant/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Plural logic&lt;/a&gt;，
&lt;a href=&#34;https://en.wikipedia.org/wiki/Paraconsistent_logic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Paraconsistent logic&lt;/a&gt;（次协调逻辑），
&lt;a href=&#34;https://en.wikipedia.org/wiki/Quantum_logic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Quantum logic&lt;/a&gt;（量子逻辑）。
逻辑学与其它理论也有非常紧密的联系，如集合论、证明论、模型论、计算理论等。
在计算机技术领域，学习一阶逻辑、时态逻辑等，可以帮助我们更好地运用形式化方法。&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Dubbo 集成 Istio 的方案</title>
      <link>/post/dubbo-integrate-with-istio/</link>
      <pubDate>Fri, 05 Jun 2020 10:00:00 +0800</pubDate>
      
      <guid>/post/dubbo-integrate-with-istio/</guid>
      <description>Dubbo 是个流行的微服务框架，其功能和ServiceMesh有一定重合。在将Dubbo逐步迁移到Istio架构时，有一些问题需要解决。 其中，服务注</description>
    </item>
    
    <item>
      <title>Homelab增加新玩具R630</title>
      <link>/post/adding-new-equipment-r630-to-my-homelab/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/adding-new-equipment-r630-to-my-homelab/</guid>
      <description>&lt;div id=&#34;preamble&#34;&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;几年前用J3710组装了一台NAS，同时虚拟化了一个VM安装OpenWRT来承担家庭网络路由的功能，一直稳定运行至今。
然而J3710性能实在太低，无法做诸如性能测试、开发编译等事情，并且如果不小心搞挂了NAS，家里的网络也就中断了，实在不方便。
因此考虑添加一台机器，做个简陋的Homelab。新机器当然是不可能去买的，银子不够，于是去垃圾场捡了一台24核48线程的R630回来。
在此记录分享下折腾的过程。&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Istio数据面性能测试与优化</title>
      <link>/post/latency-optimization-for-istio-proxy-based-on-envoy/</link>
      <pubDate>Fri, 28 Feb 2020 17:43:24 +0800</pubDate>
      
      <guid>/post/latency-optimization-for-istio-proxy-based-on-envoy/</guid>
      <description>&lt;p&gt;2017下半年，非侵入式微服务架构迅速吸引开发者眼球， ServiceMesh 进入飞速发展通道，至今已近三年。Istio快速迭代，只经历了14个月便从0.1进化到1.0版本，这赶上了Kubernetes崛起时的迭代速度。本文分享了一些对Istio数据面进行性能测试与优化的经验，加深对Istio的理解。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>macOS 透明代理配置</title>
      <link>/post/transparent_proxy_on_macosx/</link>
      <pubDate>Sun, 17 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/transparent_proxy_on_macosx/</guid>
      <description>&lt;div id=&#34;preamble&#34;&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;我厂办公环境只能通过「HTTP代理」连接外网，作为程序猿，MacBook上有形形色色需要连接外网的软件，
这些软件支持的代理协议、代理的设置方式可能都有所不同，给这些软件设置代理成为了一件繁琐的事情。
下班离开公司，MacBook网络环境改变，可能还需要切换或取消公司的代理设置，这极大地增加了程序猿的心智负担。
因此我一直想寻求灵活统一的全局代理设置方式，这中间尝试过 &lt;code&gt;Proxifier&lt;/code&gt; 、 &lt;code&gt;proxychains&lt;/code&gt; 等，但并不满意。
想到Linux通过iptables实现科学上网的透明代理非常容易，研究了一下macOS的包过滤机制，
发现 &lt;a href=&#34;https://www.openbsd.org/faq/pf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pf&lt;/a&gt; 可以实现类似的方案，因此分享一下。如果您不了解 &lt;code&gt;pf&lt;/code&gt; ，
可以通过执行 &lt;code&gt;man pf.conf&lt;/code&gt; 或查看Murus的 &lt;a href=&#34;https://murusfirewall.com/Documentation/OS%20X%20PF%20Manual.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;macOS pf手册&lt;/a&gt; 进行学习。&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>AsciiDoc theme style</title>
      <link>/post/asciidoc-preview/</link>
      <pubDate>Thu, 15 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/asciidoc-preview/</guid>
      <description>Table of Contents Tables Mathematical Symbols stem asciimath latexmath Mathematical logic Admonition Passthroughs Passthrough Macros Passthrough Blocks Youtube User Interface Macros bibliography Diagram by Coding Tables Table 1. 希腊字母 希腊字母小写、大写 LaTeX形式 MathJax α A \alpha A $\alpha$: $\alpha$, $A$: $A$ β B \beta B $\beta$: $\beta$, $B$: $B$ γ Γ \gamma \Gamma $\gamma$:</description>
    </item>
    
  </channel>
</rss>