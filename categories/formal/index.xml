<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Formal on ybyte blog</title>
    <link>/categories/formal/</link>
    <description>Recent content in Formal on ybyte blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 08 Sep 2020 21:00:00 +0800</lastBuildDate>
    
	<atom:link href="/categories/formal/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Specifying Systems 笔记2 Liveness</title>
      <link>/post/specifying-systems-notes-2/</link>
      <pubDate>Tue, 08 Sep 2020 21:00:00 +0800</pubDate>
      
      <guid>/post/specifying-systems-notes-2/</guid>
      <description>&lt;div id=&#34;preamble&#34;&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Specifying Systems的1-7章层层推进，在实例中穿插着原理讲解，深入浅出地讲解了Specification是什么，以及如何设计系统规约。
这些Specification表明了系统的Safety属性&amp;#8201;&amp;#8212;&amp;#8201;即系统行为被约束在一定范围内，不会做出一些不被允许的行为(something &lt;strong&gt;bad&lt;/strong&gt; does not happen)。
在TLA+中，通常使用公式 \(Spec \triangleq Init \land \Box [Next]_{vars}\) 来描述系统的Safety属性(约束)。
Safety属性说明了系统中什么不能发生，但无法表达系统中&lt;strong&gt;某些时间一定会发生&lt;/strong&gt;的这类属性，而Liveness便可以表达(&#34;something &lt;strong&gt;good&lt;/strong&gt; eventully happen&#34;)。
Liveness使用时态逻辑公式进行描述，一个系统规约可以通过公式 \(Spec \triangleq Init \land \Box [Next]_{vars} \land L\) 来同时描述其对Safety和Liveness的要求，
公式末尾的 $L$ 便是描述Liveness属性的公式。&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>数理逻辑一些概念</title>
      <link>/post/logic/</link>
      <pubDate>Tue, 08 Sep 2020 21:00:00 +0800</pubDate>
      
      <guid>/post/logic/</guid>
      <description>&lt;div id=&#34;preamble&#34;&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;形式化方法已经有大量的应用，如计算机辅助证明、模型检查、系统规约化语言（如TLA+），这些技术的基础都离不开数理逻辑。
现代逻辑学已经发展得非常广泛：
&lt;a href=&#34;https://en.wikipedia.org/wiki/Propositional_calculus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Propositional logic&lt;/a&gt;（命题逻辑），
&lt;a href=&#34;https://en.wikipedia.org/wiki/First-order_logic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;First-order logic&lt;/a&gt;（也称 Predicate logic），
&lt;a href=&#34;https://en.wikipedia.org/wiki/Second-order_logic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Second-order logic&lt;/a&gt;，
&lt;a href=&#34;https://en.wikipedia.org/wiki/Higher-order_logic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Higher-order logic&lt;/a&gt;，
&lt;a href=&#34;https://en.wikipedia.org/wiki/Intuitionistic_logic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Constructive logic&lt;/a&gt;（也称 Intuitionistic logic），
&lt;a href=&#34;https://en.wikipedia.org/wiki/Modal_logic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Modal logic&lt;/a&gt;（模态逻辑），
&lt;a href=&#34;https://en.wikipedia.org/wiki/Temporal_logic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Temporal logic&lt;/a&gt;（时态逻辑是模态逻辑的一个分支），
&lt;a href=&#34;https://plato.stanford.edu/entries/logic-free/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Free logic&lt;/a&gt;，
&lt;a href=&#34;https://plato.stanford.edu/entries/plural-quant/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Plural logic&lt;/a&gt;，
&lt;a href=&#34;https://en.wikipedia.org/wiki/Paraconsistent_logic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Paraconsistent logic&lt;/a&gt;（次协调逻辑），
&lt;a href=&#34;https://en.wikipedia.org/wiki/Quantum_logic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Quantum logic&lt;/a&gt;（量子逻辑）。
逻辑学与其它理论也有非常紧密的联系，如集合论、证明论、模型论、计算理论等。
在计算机技术领域，学习一阶逻辑、时态逻辑等，可以帮助我们更好地运用形式化方法。&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>